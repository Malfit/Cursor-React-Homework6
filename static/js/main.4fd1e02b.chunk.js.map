{"version":3,"sources":["components/post/AuthorInfo/index.js","components/post/AuthorInfo/AuthorInfo.js","components/post/ImageContent/index.js","components/post/ImageContent/ImageContent.js","components/post/AdditionalBar/index.js","components/post/AdditionalBar/AdditionalBar.js","App.js","serviceWorker.js","redux/reducers/root.reducer.js","redux/actions/root.actions.js","redux/store.js","components/Form/index.js","components/Form/Form.js","index.js"],"names":["AuthorInfo","item","className","src","postAuthor","authorPhoto","alt","author","nickname","date","textPost","ImageContent","imagePost","AdditionalBar","cursor","countComments","countSharing","countLikes","App","useSelector","state","posts","map","index","key","Boolean","window","location","hostname","match","initialState","authors","newPost","textValue","linkValue","rootReducer","action","type","store","createStore","srr","Form","useState","changeTextPostState","linkPost","changelinkPostState","changeAuthor","dispatch","useDispatch","options","Date","now","name","placeholder","onChange","e","target","value","onClick","preventDefault","addNewPostData","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd1e02b.chunk.js","sourcesContent":["import AuthorInfo from './AuthorInfo';\r\n\r\nexport default AuthorInfo;","import React from 'react';\r\nimport './AuthorInfo.css';\r\n\r\nimport {FaRegCheckCircle, MdKeyboardArrowDown} from 'react-icons/all'\r\n\r\nconst AuthorInfo = ({item}) => {\r\n    return (\r\n            <div className = \"authorInfo\">\r\n                <img className = \"authorAvatar\" src={item.postAuthor.authorPhoto} alt=\"error\"></img>\r\n                <div className = \"postInfo\"> \r\n                    <p>{item.postAuthor.author}  <FaRegCheckCircle/>   <span className = \"nickname_date\">{item.postAuthor.nickname} {item.date}</span> \r\n                        <span className = \"arrowdown\"> <MdKeyboardArrowDown/></span></p> \r\n                       \r\n                    <p>{item.textPost}</p>\r\n                </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default AuthorInfo;","import ImageContent from './ImageContent';\r\n\r\nexport default ImageContent;","import React from 'react';\r\nimport './ImageContent.css';\r\n\r\nconst ImageContent = ({item}) => {\r\n    return(\r\n        <div className=\"imageContentDiv\"> \r\n            <img className = \"imageContent\" src={item.imagePost} alt=\"error\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageContent;","import AdditionalBar from './AdditionalBar';\r\n\r\nexport default AdditionalBar;","import React from 'react';\r\nimport {FiHeart, MdCreate, FiUpload, FiShare2} from 'react-icons/all';\r\nimport './AdditionalBar.css';\r\n\r\nconst AdditionalBar = ({item}) => {   \r\n    return(\r\n        <div className = \"postAdditionalBar\">\r\n            <ul className=\"barList\">\r\n                <li><MdCreate cursor=\"pointer\" /> {item.countComments} </li>\r\n                <li><FiShare2 cursor=\"pointer\" />  {item.countSharing} </li>\r\n                <li><FiHeart cursor=\"pointer\"  />  {item.countLikes} </li>\r\n                <li><FiUpload/></li>\r\n            </ul>                   \r\n        </div>\r\n        )\r\n}\r\n\r\nexport default AdditionalBar;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport AuthorInfo from './components/post/AuthorInfo';\r\nimport ImageContent from './components/post/ImageContent';\r\nimport AdditionalBar from './components/post/AdditionalBar';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const posts = useSelector(state => state.posts);\r\n  return (\r\n    posts.map((item, index)=>( \r\n    <div key={item+index} className=\"post\">\r\n      <AuthorInfo item={item} />\r\n      <ImageContent item={item} />\r\n      <AdditionalBar item={item}/>\r\n    </div>\r\n    ))    \r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SET_POST_DATA } from '../actions/root.actions';\r\n\r\nconst initialState = {\r\n  posts: [\r\n    {\r\n      postAuthor : { \r\n        author:\"Anakin Skywalker\",\r\n        authorPhoto: \"https://kvaclub.ru/wp-content/uploads/2017/02/Anakin_2.png\",\r\n        nickname: \"@dart_vader\",\r\n      },\r\n      date: \"23 февр.\",\r\n      textPost: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n      imagePost: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\", \r\n      countLikes: 887,\r\n      countComments: 482,\r\n      countSharing: 146,\r\n    },\r\n    {\r\n      postAuthor : { \r\n        author:\"General Hax\",\r\n        authorPhoto: \"https://kvaclub.ru/wp-content/uploads/2017/02/General-Hux.png\",\r\n        nickname: \"@dark_general  \",\r\n      },\r\n      date: \"24 февр.\",\r\n      textPost: \"WTF? Who is Ray? Why she is Skywalker? Anakin...?\",\r\n      imagePost: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\", \r\n      countLikes: 345,\r\n      countComments: 235,\r\n      countSharing: 123,\r\n    },\r\n    {\r\n      postAuthor : { \r\n        author:\"Obi-Wan Kenobi\",\r\n        authorPhoto: \"https://kvaclub.ru/wp-content/uploads/2017/02/Obi-Van.png\",\r\n        nickname: \"@wan_ken\",\r\n      },\r\n      date: \"25 февр.\",\r\n      textPost: \"WTF? Who is Ray? Why she is Skywalker? Hax...?\",\r\n      imagePost: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\", \r\n      countLikes: 960,\r\n      countComments: 343,\r\n      countSharing: 203,\r\n    }\r\n  ] , \r\n  authors : [\"Anakin Skywalker\", \"General Hax\", \"Obi-Wan Kenobi\"],\r\n  newPost : [\r\n  {\r\n    textValue: \"\",\r\n    linkValue: \"\",\r\n    author: \"\",\r\n  }\r\n  ],\r\n\r\n}\r\n\r\n  const rootReducer =  (state = initialState, action) => {\r\n     switch (action.type) {\r\n        case SET_POST_DATA:\r\n          return {\r\n            ...state,\r\n            newPost: {textValue: action.textValue, linkValue: action.linkValue, author: action.author},\r\n          }\r\n       default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n\r\n  export default rootReducer;","export const SET_POST_DATA = 'SET_POST_DATA';\r\n\r\nexport const addNewPostData = (textValue, linkValue, author)  => ({\r\n    type: SET_POST_DATA,\r\n    textValue,\r\n    linkValue,\r\n    author,\r\n});","import  { createStore } from 'redux';\r\nimport rootReducer from './reducers/root.reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nwindow.srr = store;\r\n\r\nexport default store;","import Form from './Form';\r\n\r\nexport default Form;","import React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    addNewPostData\r\n  } from '../../redux/actions/root.actions';\r\n\r\nimport './Form.css';\r\n\r\nconst Form = () => {\r\n    const [textPost, changeTextPostState] = useState('');\r\n    const [linkPost, changelinkPostState] = useState('');\r\n    const [author, changeAuthor] = useState(\"Anakin Skywalker\");\r\n    const dispatch = useDispatch();\r\n    const authors = useSelector(store => store.authors);\r\n\r\n    \r\n    const options = authors.map(item => (\r\n      <option key={item+Date.now()} >{item}</option>\r\n    ))\r\n\r\n    const changeTextPost = (e) => {\r\n      changeTextPostState(e.target.value);\r\n    };\r\n    \r\n    const changeLinkToImage = (e) => {\r\n      changelinkPostState(e.target.value);\r\n    };\r\n\r\n    const changeAnotherAuthor = (e) =>{\r\n      changeAuthor(e.target.value);\r\n    }\r\n\r\n    const onButtonClick = (e) => {\r\n        e.preventDefault();\r\n        dispatch(addNewPostData(textPost, linkPost, author))\r\n        changeTextPostState(\"\");\r\n        changelinkPostState(\"\");\r\n    };\r\n\r\n\r\n    return (\r\n        <form className=\"formPost\">\r\n          <div className=\"firstGroup\">\r\n            <input\r\n            type=\"text\"\r\n            name=\"textPost\"\r\n            className=\"formInput\"\r\n            placeholder=\"type text to your post...\"\r\n            onChange={changeTextPost}\r\n            value={textPost}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"linkToImage\"\r\n            className=\"formInput\"\r\n            placeholder=\"type link to your post image...\"\r\n            onChange={changeLinkToImage}\r\n            value={linkPost}\r\n          />\r\n          <select className=\"selectAuthorPost\"  onChange={changeAnotherAuthor} value={author}>\r\n            {options}\r\n        </select>\r\n        </div>\r\n          <button className=\"btnPost\" onClick={onButtonClick}>Post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store';\r\nimport Form from './components/Form';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <div className=\"allApp\">\r\n        <App />  \r\n        <div className=\"form\">\r\n          <Form />\r\n        </div> \r\n      </div>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}